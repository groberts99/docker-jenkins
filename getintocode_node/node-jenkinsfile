pipeline {
    agent {
        kubernetes {
            // Rather than inline YAML, in a multibranch Pipeline you could use: yamlFile 'jenkins-pod.yaml'
            // Or, to avoid YAML:
            // containerTemplate {
            //     name 'shell'
            //     image 'ubuntu'
            //     command 'sleep'
            //     args 'infinity'
            // }
            yaml '''
apiVersion: v1
kind: Pod
spec:
  serviceAccountName: jenkins-admin
  containers:
  - name: docker
    image: docker:latest
    command:
    - cat
    tty: true
    volumeMounts:
      - mountPath: /var/run/docker.sock
        name: docker-sock
  volumes:
  - name: docker-sock
    hostPath:
      path: /var/run/docker.sock  
  
'''
            // Can also wrap individual steps:
            // container('shell') {
            //     sh 'hostname'
            // }
            defaultContainer 'shell'
        }
    }
    stages {
        // stage('check_files') {
        //     steps {
        //       container('shell'){
        //       sh '''
        //         ls -l
        //       '''
        //       }
        //     }
        // }
        stage('build') {
            steps {
              container('docker'){
              sh '''
                docker build -t hellonode ./getintocode_node
              '''
              }
            }
        }
        stage('run') {
            steps {
              container('docker'){
                snykSecurity organisation: 'snyk_demo', 
                projectName: 'nodejs_demo_snyk', 
                severity: 'medium', 
                snykInstallation: 'Please define a Snyk installation in the Jenkins Global Tool Configuration. This task will not run without a Snyk installation.', 
                snykTokenId: '730477c1-46fe-44f3-afc2-0670bfd392b5', 
                targetFile: 'package.json'
              }
            }
        }
        // stage('Build') {
        //     echo "Build"
        // }
        // stage('Results') {
        //     echo "Test Result"
        // }
    }
}
